//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""13f97ea6-da82-46eb-8516-1ab019db8717"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""096c913d-7a22-4888-890c-94c8d2ca2f68"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4a80ad8f-3859-4230-87d2-1fd6544e4228"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""cc8a7675-c6fa-438d-9110-8df20801ddd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""d6b30bc4-39b4-4edd-88f4-74b9cc85cf5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""dd9ff5b2-d21a-4092-944b-7a63cae316e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bb73270e-c869-4794-b6dc-c17a13064bdf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""37806c69-0b26-4310-b417-643edc7d64ef"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ca63bb5c-7c84-4d6e-a279-ca876d4b2433"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5fb7eaa4-3e7a-4b36-b673-24d205a665cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""acd97f68-8e53-4247-83d3-d916d7484111"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a232a77-d7b2-4346-8897-58dbec863f79"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dedef0e3-ddb4-4912-8480-74fc86572db1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b613de7-eeac-44e2-98a5-3554138ad582"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07576527-c763-47d7-93d6-53e9efe7a3fd"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMechanics"",
            ""id"": ""95b5f076-2a3c-4bb0-9462-00cc9a9c7aa7"",
            ""actions"": [
                {
                    ""name"": ""ToggleBuildMode"",
                    ""type"": ""Button"",
                    ""id"": ""47f5af04-6812-4882-acee-b0066f9b61c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""f7a7c611-4620-44a9-bbda-f3d9af1c83ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""8bb18766-fc91-49af-b170-8858e3f6bd40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""7389acf2-a331-48df-b83e-1576f4e5970d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TertiaryInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""9fa77cdd-a697-4bb9-ad00-d55f0af40125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sheath"",
                    ""type"": ""Button"",
                    ""id"": ""2b34baa4-0567-440c-a9a2-e7d2a3fd71a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""848f29e1-931f-4519-8a2a-c39e064dc424"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""ToggleBuildMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a343eda-5ac7-420a-af43-a0c93fd8139d"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8f90f20-2e4d-493f-9b45-c2e3af10660f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""PrimaryInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1f026c1-7963-4d2f-8830-63dd6e40ac99"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""SecondaryInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e743fb47-ab73-4835-bf84-98622872d951"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""TertiaryInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""788972a8-ee00-4c67-9626-3b49aadb5be9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Sheath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerCamera"",
            ""id"": ""161be2c2-8f35-44fd-8674-ab993a449f24"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""15acdb96-f552-496c-85e0-466f6420d7ee"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5ac74b2d-529c-4c18-b845-cdc02b3461a6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""468b9d31-5126-4291-936d-b22bd98caa4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlipCameraAlignment"",
                    ""type"": ""Button"",
                    ""id"": ""2aababd6-78b3-470a-8664-4215e57b5e5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b4eaf605-d5cb-4966-a4a5-e52e89ea0c6a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4815c7b6-34cc-45d5-aa72-e83ac5930a86"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""650405d4-a9eb-4185-8454-541b504225b9"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""CameraSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70359ed6-b14e-40a3-b3a8-cd4c3c55e778"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""FlipCameraAlignment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97cd8cb2-1d19-493a-9012-2c330541c09b"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d3225b7-5ace-4b6b-a31c-893b386698cf"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse + Keyboard"",
            ""bindingGroup"": ""Mouse + Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_HorizontalMovement = m_PlayerMovement.FindAction("HorizontalMovement", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovement_Crouch = m_PlayerMovement.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerMovement_Walk = m_PlayerMovement.FindAction("Walk", throwIfNotFound: true);
        m_PlayerMovement_Sprint = m_PlayerMovement.FindAction("Sprint", throwIfNotFound: true);
        // PlayerMechanics
        m_PlayerMechanics = asset.FindActionMap("PlayerMechanics", throwIfNotFound: true);
        m_PlayerMechanics_ToggleBuildMode = m_PlayerMechanics.FindAction("ToggleBuildMode", throwIfNotFound: true);
        m_PlayerMechanics_LockOn = m_PlayerMechanics.FindAction("LockOn", throwIfNotFound: true);
        m_PlayerMechanics_PrimaryInteraction = m_PlayerMechanics.FindAction("PrimaryInteraction", throwIfNotFound: true);
        m_PlayerMechanics_SecondaryInteraction = m_PlayerMechanics.FindAction("SecondaryInteraction", throwIfNotFound: true);
        m_PlayerMechanics_TertiaryInteraction = m_PlayerMechanics.FindAction("TertiaryInteraction", throwIfNotFound: true);
        m_PlayerMechanics_Sheath = m_PlayerMechanics.FindAction("Sheath", throwIfNotFound: true);
        // PlayerCamera
        m_PlayerCamera = asset.FindActionMap("PlayerCamera", throwIfNotFound: true);
        m_PlayerCamera_MouseX = m_PlayerCamera.FindAction("MouseX", throwIfNotFound: true);
        m_PlayerCamera_MouseY = m_PlayerCamera.FindAction("MouseY", throwIfNotFound: true);
        m_PlayerCamera_CameraSwitch = m_PlayerCamera.FindAction("CameraSwitch", throwIfNotFound: true);
        m_PlayerCamera_FlipCameraAlignment = m_PlayerCamera.FindAction("FlipCameraAlignment", throwIfNotFound: true);
        m_PlayerCamera_MouseScroll = m_PlayerCamera.FindAction("MouseScroll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_HorizontalMovement;
    private readonly InputAction m_PlayerMovement_Jump;
    private readonly InputAction m_PlayerMovement_Crouch;
    private readonly InputAction m_PlayerMovement_Walk;
    private readonly InputAction m_PlayerMovement_Sprint;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMovement => m_Wrapper.m_PlayerMovement_HorizontalMovement;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputAction @Crouch => m_Wrapper.m_PlayerMovement_Crouch;
        public InputAction @Walk => m_Wrapper.m_PlayerMovement_Walk;
        public InputAction @Sprint => m_Wrapper.m_PlayerMovement_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @HorizontalMovement.started += instance.OnHorizontalMovement;
            @HorizontalMovement.performed += instance.OnHorizontalMovement;
            @HorizontalMovement.canceled += instance.OnHorizontalMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @HorizontalMovement.started -= instance.OnHorizontalMovement;
            @HorizontalMovement.performed -= instance.OnHorizontalMovement;
            @HorizontalMovement.canceled -= instance.OnHorizontalMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerMechanics
    private readonly InputActionMap m_PlayerMechanics;
    private List<IPlayerMechanicsActions> m_PlayerMechanicsActionsCallbackInterfaces = new List<IPlayerMechanicsActions>();
    private readonly InputAction m_PlayerMechanics_ToggleBuildMode;
    private readonly InputAction m_PlayerMechanics_LockOn;
    private readonly InputAction m_PlayerMechanics_PrimaryInteraction;
    private readonly InputAction m_PlayerMechanics_SecondaryInteraction;
    private readonly InputAction m_PlayerMechanics_TertiaryInteraction;
    private readonly InputAction m_PlayerMechanics_Sheath;
    public struct PlayerMechanicsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMechanicsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleBuildMode => m_Wrapper.m_PlayerMechanics_ToggleBuildMode;
        public InputAction @LockOn => m_Wrapper.m_PlayerMechanics_LockOn;
        public InputAction @PrimaryInteraction => m_Wrapper.m_PlayerMechanics_PrimaryInteraction;
        public InputAction @SecondaryInteraction => m_Wrapper.m_PlayerMechanics_SecondaryInteraction;
        public InputAction @TertiaryInteraction => m_Wrapper.m_PlayerMechanics_TertiaryInteraction;
        public InputAction @Sheath => m_Wrapper.m_PlayerMechanics_Sheath;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMechanics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMechanicsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMechanicsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMechanicsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMechanicsActionsCallbackInterfaces.Add(instance);
            @ToggleBuildMode.started += instance.OnToggleBuildMode;
            @ToggleBuildMode.performed += instance.OnToggleBuildMode;
            @ToggleBuildMode.canceled += instance.OnToggleBuildMode;
            @LockOn.started += instance.OnLockOn;
            @LockOn.performed += instance.OnLockOn;
            @LockOn.canceled += instance.OnLockOn;
            @PrimaryInteraction.started += instance.OnPrimaryInteraction;
            @PrimaryInteraction.performed += instance.OnPrimaryInteraction;
            @PrimaryInteraction.canceled += instance.OnPrimaryInteraction;
            @SecondaryInteraction.started += instance.OnSecondaryInteraction;
            @SecondaryInteraction.performed += instance.OnSecondaryInteraction;
            @SecondaryInteraction.canceled += instance.OnSecondaryInteraction;
            @TertiaryInteraction.started += instance.OnTertiaryInteraction;
            @TertiaryInteraction.performed += instance.OnTertiaryInteraction;
            @TertiaryInteraction.canceled += instance.OnTertiaryInteraction;
            @Sheath.started += instance.OnSheath;
            @Sheath.performed += instance.OnSheath;
            @Sheath.canceled += instance.OnSheath;
        }

        private void UnregisterCallbacks(IPlayerMechanicsActions instance)
        {
            @ToggleBuildMode.started -= instance.OnToggleBuildMode;
            @ToggleBuildMode.performed -= instance.OnToggleBuildMode;
            @ToggleBuildMode.canceled -= instance.OnToggleBuildMode;
            @LockOn.started -= instance.OnLockOn;
            @LockOn.performed -= instance.OnLockOn;
            @LockOn.canceled -= instance.OnLockOn;
            @PrimaryInteraction.started -= instance.OnPrimaryInteraction;
            @PrimaryInteraction.performed -= instance.OnPrimaryInteraction;
            @PrimaryInteraction.canceled -= instance.OnPrimaryInteraction;
            @SecondaryInteraction.started -= instance.OnSecondaryInteraction;
            @SecondaryInteraction.performed -= instance.OnSecondaryInteraction;
            @SecondaryInteraction.canceled -= instance.OnSecondaryInteraction;
            @TertiaryInteraction.started -= instance.OnTertiaryInteraction;
            @TertiaryInteraction.performed -= instance.OnTertiaryInteraction;
            @TertiaryInteraction.canceled -= instance.OnTertiaryInteraction;
            @Sheath.started -= instance.OnSheath;
            @Sheath.performed -= instance.OnSheath;
            @Sheath.canceled -= instance.OnSheath;
        }

        public void RemoveCallbacks(IPlayerMechanicsActions instance)
        {
            if (m_Wrapper.m_PlayerMechanicsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMechanicsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMechanicsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMechanicsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMechanicsActions @PlayerMechanics => new PlayerMechanicsActions(this);

    // PlayerCamera
    private readonly InputActionMap m_PlayerCamera;
    private List<IPlayerCameraActions> m_PlayerCameraActionsCallbackInterfaces = new List<IPlayerCameraActions>();
    private readonly InputAction m_PlayerCamera_MouseX;
    private readonly InputAction m_PlayerCamera_MouseY;
    private readonly InputAction m_PlayerCamera_CameraSwitch;
    private readonly InputAction m_PlayerCamera_FlipCameraAlignment;
    private readonly InputAction m_PlayerCamera_MouseScroll;
    public struct PlayerCameraActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerCameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseX => m_Wrapper.m_PlayerCamera_MouseX;
        public InputAction @MouseY => m_Wrapper.m_PlayerCamera_MouseY;
        public InputAction @CameraSwitch => m_Wrapper.m_PlayerCamera_CameraSwitch;
        public InputAction @FlipCameraAlignment => m_Wrapper.m_PlayerCamera_FlipCameraAlignment;
        public InputAction @MouseScroll => m_Wrapper.m_PlayerCamera_MouseScroll;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCameraActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Add(instance);
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
            @MouseY.started += instance.OnMouseY;
            @MouseY.performed += instance.OnMouseY;
            @MouseY.canceled += instance.OnMouseY;
            @CameraSwitch.started += instance.OnCameraSwitch;
            @CameraSwitch.performed += instance.OnCameraSwitch;
            @CameraSwitch.canceled += instance.OnCameraSwitch;
            @FlipCameraAlignment.started += instance.OnFlipCameraAlignment;
            @FlipCameraAlignment.performed += instance.OnFlipCameraAlignment;
            @FlipCameraAlignment.canceled += instance.OnFlipCameraAlignment;
            @MouseScroll.started += instance.OnMouseScroll;
            @MouseScroll.performed += instance.OnMouseScroll;
            @MouseScroll.canceled += instance.OnMouseScroll;
        }

        private void UnregisterCallbacks(IPlayerCameraActions instance)
        {
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
            @MouseY.started -= instance.OnMouseY;
            @MouseY.performed -= instance.OnMouseY;
            @MouseY.canceled -= instance.OnMouseY;
            @CameraSwitch.started -= instance.OnCameraSwitch;
            @CameraSwitch.performed -= instance.OnCameraSwitch;
            @CameraSwitch.canceled -= instance.OnCameraSwitch;
            @FlipCameraAlignment.started -= instance.OnFlipCameraAlignment;
            @FlipCameraAlignment.performed -= instance.OnFlipCameraAlignment;
            @FlipCameraAlignment.canceled -= instance.OnFlipCameraAlignment;
            @MouseScroll.started -= instance.OnMouseScroll;
            @MouseScroll.performed -= instance.OnMouseScroll;
            @MouseScroll.canceled -= instance.OnMouseScroll;
        }

        public void RemoveCallbacks(IPlayerCameraActions instance)
        {
            if (m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerCameraActions @PlayerCamera => new PlayerCameraActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse + Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnHorizontalMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IPlayerMechanicsActions
    {
        void OnToggleBuildMode(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnPrimaryInteraction(InputAction.CallbackContext context);
        void OnSecondaryInteraction(InputAction.CallbackContext context);
        void OnTertiaryInteraction(InputAction.CallbackContext context);
        void OnSheath(InputAction.CallbackContext context);
    }
    public interface IPlayerCameraActions
    {
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
        void OnCameraSwitch(InputAction.CallbackContext context);
        void OnFlipCameraAlignment(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
    }
}
